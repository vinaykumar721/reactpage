{"version":3,"sources":["components/Circle.js","components/Cells.js","components/Row.js","components/SquareGrid.js","components/Board.js","App.js","reportWebVitals.js","index.js"],"names":["Circle","cell","color","style","backgroundColor","className","Cells","row","col","onClickHandler","onClick","Row","props","cells","i","push","display","SquareGrid","console","log","rows","Board","board","state","temp","slice","checkForTie","setState","tie","winner","emptyRow","rowWhereCoinBeAdded","player","checkWinner","length","y","restartGame","Array","fill","checkHorizontalWinner","value","checkVerticalWinner","checkDiagonal","this","rR","cR","rL","cL","status","class","Component","App","to","exact","path","Home","About","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7722d7cd.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Circle = ({ cell }) => {\n  let color = \"#182C61\";\n  if (cell === 1) {\n    color = \"#99e600\";\n  } else if (cell === 2) {\n    color = \"#ff99ff\";\n  }\n\n  var style = {\n    backgroundColor: color\n  };\n\n  return <div className=\"circle\" style={style} />;\n};\n\nexport default Circle;","import React from \"react\";\nimport Circle from \"./Circle\";\n\nconst Cells = ({ row, col, cell, onClickHandler }) => {\n  return (\n    <div className=\"squareGrid\" onClick={() => onClickHandler(row, col)}>\n      <Circle cell={cell} />\n    </div>\n  );\n};\n\nexport default Cells;\n","import React from \"react\";\nimport Cells from \"./Cells\";\n\nconst Row = props => {\n  let style = {\n    display: \"flex\"\n  };\n  let cells = [];\n  for (let i = 0; i < 7; i++) {\n    cells.push(\n      <Cells\n        key={i}\n        cell={props.cells[i]}\n        row={props.row}\n        col={i}\n        onClickHandler={props.onClickHandler}\n      />\n    );\n  }\n  return <div style={style}> {cells} </div>;\n};\n\nexport default Row;","import React from \"react\";\nimport Row from \"./Row\";\n\nconst SquareGrid = props => {\n  console.log(props);\n  let rows = [];\n  for (let i = 5; i >= 0; i--) {\n    rows.push(\n      <Row\n        key={i}\n        row={i}\n        cells={props.cells[i]}\n        onClickHandler={props.onClickHandler}\n      />\n    );\n  }\n  return <div>{rows}</div>;\n};\n\nexport default SquareGrid;","import React, { Component } from \"react\";\nimport SquareGrid from \"./SquareGrid\";\nexport default class Board extends Component {\n  constructor(props) {\n    super(props);\n    let cells = [];\n    for (let i = 0; i < 6; i++) {\n      cells.push(new Array(7).fill(0));\n    }\n    this.state = {\n      cells: cells,\n      player: false,\n      winner: 0,\n      tie: false\n    };\n  }\n\n  onClickHandler = (row, col) => {\n    let board = this.state.cells;\n    let temp = [];\n\n    for (let i = 0; i < 6; i++) {\n      temp.push(board[i].slice());\n    }\n\n    //check for tie\n    let tie = this.checkForTie(board);\n\n    if (tie) {\n      console.log(\"tie\");\n      this.setState({\n        tie: true\n      });\n    }\n    //if winner stop user for adding coins\n    if (this.state.winner) return;\n\n    console.log(\"temp is\" + temp);\n    let emptyRow = this.rowWhereCoinBeAdded(col);\n    console.log(emptyRow);\n    temp[emptyRow][col] = this.state.player ? 1 : 2;\n    this.setState(\n      {\n        cells: temp,\n        player: !this.state.player\n      },\n      () => {\n        if (this.checkWinner(emptyRow, col) > 0) {\n          console.log(\"winner\");\n          this.setState({\n            winner: this.state.player ? 2 : 1\n          });\n        }\n      }\n    );\n  };\n  rowWhereCoinBeAdded = col => {\n    for (let i = 0; i < 6; i++) {\n      if (this.state.cells[i][col] === 0) {\n        return i;\n      }\n    }\n    return -1;\n  };\n  //draw\n\n  checkForTie = board => {\n    for (let i = 0; i < board.length; i++) {\n      for (let y = 0; y < board[i].length; y++) {\n        if (board[i][y] === 0) {\n          return false;\n        }\n      }\n    }\n    return true;\n  };\n\n  //restart\n\n  restartGame = () => {\n    var cells = [];\n    for (let i = 0; i < 6; i++) {\n      cells.push(new Array(7).fill(0));\n    }\n    this.setState({\n      cells: cells,\n      tie: false,\n      player: false,\n      winner: 0\n    });\n  };\n  //check winner\n\n  //horizontal win\n\n  checkHorizontalWinner = (row, col) => {\n    let cells = this.state.cells;\n\n    let i = 6;\n\n    let value = this.state.player ? 2 : 1;\n\n    while (i >= 3) {\n      if (\n        cells[row][i] === value &&\n        cells[row][i - 1] === value &&\n        cells[row][i - 2] === value &&\n        cells[row][i - 3] === value\n      ) {\n        return 1;\n      }\n      i--;\n    }\n    return 0;\n  };\n\n  checkVerticalWinner = (row, col) => {\n    let cells = this.state.cells;\n    //   let i = row;\n    let value = this.state.player ? 2 : 1;\n\n    if (row >= 3) {\n      if (\n        cells[row][col] === value &&\n        cells[row - 1][col] === value &&\n        cells[row - 2][col] === value &&\n        cells[row - 3][col] === value\n      ) {\n        return 1;\n      }\n    }\n    return 0;\n  };\n  //check winner\n  checkWinner = (row, col) => {\n    return (\n      this.checkHorizontalWinner(row, col) ||\n      this.checkVerticalWinner(row, col) ||\n      this.checkDiagonal(row, col)\n    );\n  };\n\n  checkDiagonal(row, col) {\n    //find right and left tops\n    var cells = this.state.cells;\n    var value = this.state.player ? 2 : 1;\n    var rR = row;\n    var cR = col;\n    while (rR < 5 && cR < 6) {\n      rR++;\n      cR++;\n    }\n    while (rR >= 3 && cR >= 3) {\n      if (\n        cells[rR][cR] === value &&\n        cells[rR - 1][cR - 1] === value &&\n        cells[rR - 2][cR - 2] === value &&\n        cells[rR - 3][cR - 3] === value\n      ) {\n        return 1;\n      }\n      rR--;\n      cR--;\n    }\n\n    var rL = row;\n    var cL = col;\n\n    while (rL < 5 && cL > 0) {\n      rL++;\n      cL--;\n    }\n\n    while (rL >= 3 && cL <= 3) {\n      if (\n        cells[rL][cL] === value &&\n        cells[rL - 1][cL + 1] === value &&\n        cells[rL - 2][cL + 2] === value &&\n        cells[rL - 3][cL + 3] === value\n      ) {\n        return 1;\n      }\n      rL--;\n      cL++;\n    }\n    return 0;\n  }\n\n  render() {\n    \n    let status = \"\";\n    if (this.state.winner > 0) {\n      if (this.state.winner === 1) {\n        status = <p class=\"green center\"> Player 1 win</p>;\n      } else {\n        status = <p class=\"green center\"> Player 2 win</p>;\n      }\n    } else if (this.state.player) {\n      status = <p class=\"green center\" >Player 2's Turn</p>;\n    } else if (!this.state.winner && this.state.tie) {\n      status = <p class=\"green center\">Its a Tie</p>;\n    } else {\n      status = <p class=\"green center\"> Player 1's Turn</p>;\n    }\n    return (\n      <div>\n        <p className=\"status\">{status}</p>\n        <SquareGrid\n          cells={this.state.cells}\n          onClickHandler={this.onClickHandler}\n        />\n        <button className=\"btn-restart green\" onClick={() => this.restartGame()}>\n          Restart\n        </button>\n      </div>\n    );\n  }\n}","import React from \"react\";\nimport {BrowserRouter as Router, Switch,Route, Link,  useParams} from \"react-router-dom\";\nimport Board from \"./components/Board\";\nexport default function App() {\n  return (\n    <Router>\n\t\t<div class=\"name\">\n\t\t\t{/* <h1>Welcome to Routing</h1> */}\n\t\t<button>\t<Link to=\"/\" class=\"link\">Home</Link> </button>&nbsp;&nbsp;&nbsp;\n\t\t<button>\t<Link to=\"/about\" class=\"link\">Game</Link> </button>&nbsp;&nbsp;&nbsp;\n\t\t\t<hr/>\n\t\t</div>\n\t\t\n\t\t<Switch>\n\t\t  <Route exact path=\"/\">\n\t\t\t<Home />\n\t\t  </Route>\n\t\t  <Route path=\"/about\">\n\t\t\t<About />\n\t\t  </Route>\n\t\n\n\t\n\t\t  \n\t\t</Switch>\n\t</Router>\n  );\n}\n\n\n\n<Router>\n      <div class=\"margin\">\n        <ul>\n          <li>\n            <Link to=\"/\">Home</Link>\n          </li>\n          <li>\n            <Link to=\"/about\">Game</Link>\n          </li>\n \n        </ul>\n\n        <hr />\n\n        <Switch>\n          <Route exact path=\"/\">\n            <Home />\n          </Route>\n          <Route path=\"/about\">\n            <About />\n          </Route>\n      \n        </Switch>\n      </div>\n    </Router>\n\n\t\n\t\n\t\n// You can think of these components as \"pages\"\n// in your app.\n\nfunction Home() {\n  return (\n    <div>\n      {/* <h2>Home Page is Loaded</h2> */}\n\n\n      <div class=\"home\">\n      {/* <h2>Home</h2> */}\n      <h2 class=\"green \">Intructions:</h2>\n      <ul>\n        {/* <h3 class=\"green \">Description</h3> */}\n        {/* <img src={connect4} class=\"img\"/> */}\n\n        <li>This game is played on a vertical board wich has seven hollow columns and six rows.</li>\n        <li>Each column has a hole in the upper part of the board, where pieces are introduced.</li> \n        <li>There is a window for every square, so that pieces can be seen from both sides.</li>\n        <li>In short, it´s a vertical board with 42 windows distributed in 6 rows and 7 columns.</li> \n        <li>Both players have a set of 21 thin pieces (like coins); each of them uses a different colour.</li>\n        <li>The board is empty at the start of the game.</li>\n      </ul>\n      <h2 class=\"green \">Objective:</h2>\n      <p>The aim for both players is to make a straight line of four own pieces; the line can be vertical, horizontal or diagonal.</p>\n      <h2 class=\"green \">How the game goes on:</h2>\n      <ul>\n      <li>Before starting, players decide randomly which of them will be the beginner; moves are made alternatively, one by turn.</li>\n      <li>Moves entails in placing new pieces on the board; pieces slide downwards from upper holes, falling down to the last row or piling up on the last piece introduced in the same column.</li>\n      <li>So, in every turn the introduced piece may be placed at most on seven different squares.</li>\n      <li>The winner is the first player who gets a straight line made with four own pieces and no gaps between them.</li>\n      </ul>\n    </div>\n\n    </div>\n  );\n}\n\nfunction About() {\n\t\t\n  return (\n    <div class=\"board\">\n      <h2 class=\"green\">Welcome to Connect4 Game</h2>\n     \n      <Board />\n    </div> \n  );\n}","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n    \n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}